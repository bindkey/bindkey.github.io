<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://bindkey.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bindkey.github.io/" rel="alternate" type="text/html" /><updated>2018-03-09T02:28:25-06:00</updated><id>https://bindkey.github.io/</id><title type="html">El blog del tecnólogo</title><subtitle>An amazing website.</subtitle><entry><title type="html">Disabling session autostart on Antergos Linux</title><link href="https://bindkey.github.io/disabling-session-autostart-on-antergos-linux/" rel="alternate" type="text/html" title="Disabling session autostart on Antergos Linux" /><published>2018-03-06T00:00:00-06:00</published><updated>2018-03-06T00:00:00-06:00</updated><id>https://bindkey.github.io/disabling-session-autostart-on-antergos-linux</id><content type="html" xml:base="https://bindkey.github.io/disabling-session-autostart-on-antergos-linux/">&lt;p&gt;I’ve looked here at &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=164902&quot; target=&quot;_blank&quot;&gt;I don’t want programs restored after a reboot&lt;/a&gt; and over at &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=164354&quot; target=&quot;_blank&quot;&gt;xfce runs some apps twice at startup&lt;/a&gt; for an answer to the question, especially with Antergos, where this behavior has been evident.&lt;/p&gt;

&lt;p&gt;Whether it will be persistent across sessions - no pun intended - it’s something that only time will tell.&lt;/p&gt;

&lt;p&gt;Even after reading some pieces of advice from the &lt;a href=&quot;https://wiki.archlinux.org/index.php/xfce#Disable_saved_sessions&quot; target=&quot;_blank&quot;&gt;Disable saved sessions - Arch wiki&lt;/a&gt;, only the last &lt;code class=&quot;highlighter-rouge&quot;&gt;xfconf-query&lt;/code&gt; worked successfully.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; xfconf-query -c xfce4-session -p /general/SaveOnExit -n -t bool -s false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/tip-for-xfconfquery.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To double check that the settings went to effect, one would have to acess the &lt;strong&gt;xfce4-session.xml&lt;/strong&gt; file that should be located at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.config/xfce4/xfconf/xfce-perchannel-xml/&lt;/code&gt; path.&lt;/p&gt;

&lt;p&gt;One must remember to clear the saved sessions afterwards for the changes to take effect. I don’t know if by not doing so, this would have prevented the autostart items from appearing, regardless, and I’m sure one could tweak with the &lt;code class=&quot;highlighter-rouge&quot;&gt;xfonf-query&lt;/code&gt; further to find out if this is the case.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xfce4-session-preferences-session.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve looked here at I don’t want programs restored after a reboot and over at xfce runs some apps twice at startup for an answer to the question, especially with Antergos, where this behavior has been evident.</summary></entry><entry><title type="html">Libzita Resampler Already Exists In Filesystem</title><link href="https://bindkey.github.io/libzita-resampler-already-exists-in-filesystem/" rel="alternate" type="text/html" title="Libzita Resampler Already Exists In Filesystem" /><published>2018-02-23T00:00:00-06:00</published><updated>2018-02-23T00:00:00-06:00</updated><id>https://bindkey.github.io/libzita-resampler-already-exists-in-filesystem</id><content type="html" xml:base="https://bindkey.github.io/libzita-resampler-already-exists-in-filesystem/">&lt;p&gt;On the most recent upgrade for Arch, some file conflicts prevented the upgrades from going through.&lt;/p&gt;

&lt;p&gt;The message was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; zita-resampler: libzita-resampler.so.1 already exits in filesystem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which by looking at the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib&lt;/code&gt; which contained it, it was a safe assumption that by removing it manually would not cause any harm to the system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/libzita-resampler.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But I wanted to make sure nonetheless, and by following good practice I queried a search, which returned that it was not a bug, and that it could be removed from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib&lt;/code&gt;, to let the updates continue.&lt;/p&gt;

&lt;p&gt;For further reading see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugs.archlinux.org/task/57602&quot; target=&quot;_blank&quot;&gt;FS#57602 - [zita-resampler] Conflicting file in upgrade to 1.6.0-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.archlinux.org/news/zita-resampler-160-1-2-update-requires-manual-intervention/&quot; target=&quot;_blank&quot;&gt;zita-resampler 1.6.0-1 -&amp;gt; 2 update requires manual intervention&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="archlinux" /><category term="antergos" /><summary type="html">On the most recent upgrade for Arch, some file conflicts prevented the upgrades from going through.</summary></entry><entry><title type="html">Antergos Keyboard Selection During Installation</title><link href="https://bindkey.github.io/antergos-keyboard-selection-during-installation/" rel="alternate" type="text/html" title="Antergos Keyboard Selection During Installation" /><published>2018-01-27T07:49:17-06:00</published><updated>2018-01-27T07:49:17-06:00</updated><id>https://bindkey.github.io/antergos-keyboard-selection-during-installation</id><content type="html" xml:base="https://bindkey.github.io/antergos-keyboard-selection-during-installation/">&lt;p&gt;One of the drawbacks during the installation of &lt;a href=&quot;https://antergos.com&quot; target=&quot;_blank&quot;&gt;Antergos Linux&lt;/a&gt; was in identifying the keyboard layout option that was previously selected during the media installation.&lt;/p&gt;

&lt;p&gt;As a result only the default variant was being used after installing the system.&lt;/p&gt;

&lt;p&gt;I was able to identify the problem by going to the X window system xorg configuration file &lt;code&gt;/etc/X11/xorg.d/00-keyboard.conf&lt;/code&gt; and noticing that the &lt;strong&gt;XkbLayout&lt;/strong&gt; variant was not being properly identified as originally intended.&lt;/p&gt;

&lt;p&gt;In my case, only one of the options had been specified correctly on the &lt;code&gt;00-keyboard.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;What I found odd, is that on another system, which is by the way, running the same xfce environment from Antergos, the same problem was not encountered. On the other system, only one (1) variant was used, and it had correctly identified the layout twice, but on the system which after installing the Antergos media, loaded the incorrect values, two (2) variants were set accordingly, but only one (1) layout option was identified. In my case &lt;strong&gt;us&lt;/strong&gt; had been been identified once, whereas with the former no issues pertaining to this problem occurred in the first place.&lt;/p&gt;

&lt;p&gt;As the wiki &lt;a href=&quot;https://wiki.archlinux.org/index.php/Keyboard_configuration_in_Xorg#Using_X_configuration_files&quot; target=&quot;_blank&quot;&gt;Using X configuration files wiki&lt;/a&gt; recommends, not to modify any of the settings manually, but let instead &lt;strong&gt;localectl&lt;/strong&gt; handle it. &lt;a href=&quot;#sample&quot;&gt;&lt;sup id=&quot;sampleref&quot;&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/localectl-usage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, it comes handy when there is even an example that illustrates the process by using the correct parameters. For something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/00-keyboard-sample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then something like the following &lt;a href=&quot;#localectl&quot;&gt;&lt;sup id=&quot;localectlref&quot;&gt;2&lt;/sup&gt;&lt;/a&gt;, based on the previous example, suffices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/localectl-sample-usage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the values as deemed applicable to the desired customization.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a name=&quot;sample&quot;&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Keyboard_configuration_in_Xorg#Using_X_configuration_files&quot; target=&quot;_blank&quot;&gt;Using X Configuration files 00-keyboard.conf&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#sampleref&quot;&gt; &amp;#x21A9;&amp;#xFE0E;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a name=&quot;localectl&quot;&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Keyboard_configuration_in_Xorg#Using_localectl&quot; target=&quot;_blank&quot;&gt;Using localectl&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#localectlref&quot;&gt; &amp;#x21A9;&amp;#xFE0E;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">One of the drawbacks during the installation of Antergos Linux was in identifying the keyboard layout option that was previously selected during the media installation.</summary></entry><entry><title type="html">Antergos Grub Selection</title><link href="https://bindkey.github.io/antergos-grub-selection/" rel="alternate" type="text/html" title="Antergos Grub Selection" /><published>2018-01-20T07:38:47-06:00</published><updated>2018-01-20T07:38:47-06:00</updated><id>https://bindkey.github.io/antergos-grub-selection</id><content type="html" xml:base="https://bindkey.github.io/antergos-grub-selection/">&lt;p&gt;During the installation of Antergos, there was an option to install the Linux LTS kernel along with the default latest stable version.&lt;/p&gt;

&lt;p&gt;Even though it was installed appropriately, the option to select the other kernel, could not be seen from the Grub selection window.&lt;/p&gt;

&lt;p&gt;this is even after running the usual mkinitcpio -p &lt;linux kernel=&quot;&quot;&gt; that loads the modules and other dependencies accordingly.&lt;/linux&gt;&lt;/p&gt;

&lt;p&gt;It’s good to remember that Grub configuration file though, resides on the /boot/default directory.&lt;/p&gt;

&lt;p&gt;With sudo privileges, access the file at /boot/default/grub first.&lt;/p&gt;

&lt;p&gt;Therein, and lying at the bottom of the configuration file, one can find the:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Uncomment to make GRUB remember the last selection. This requires to
  # set 'GRUB_DEFAULT=saved' above.
  #GRUB_SAVEDEFAULT=&quot;true&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One could uncomment the GRUB_SAVEDEFAULT=”true” so the grub configuration file ‘remembers’ the selection.&lt;/p&gt;

&lt;p&gt;Furthermore, and right on the top of the file the default chosen selection can be specified by modifying the value of 0:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # GRUB boot loader configuration
  GRUB_DEFAULT=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To a 2 or 3 for the desired kernel. Which in my case, and if the LTS kernel is to be loaded instead, matched the kernel itself and the fallback for it.&lt;/p&gt;

&lt;p&gt;By going this route, it no longer is necessary in specifying during the system startup, the desired kernel that one chooses to be loaded.&lt;/p&gt;

&lt;p&gt;Remember after making any changes to grub, to update the configuration file by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more info about this, visit the wiki:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB/Tips_and_tricks&quot; target=&quot;_blank&quot;&gt;GRUB/Tips and tricks&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">During the installation of Antergos, there was an option to install the Linux LTS kernel along with the default latest stable version.</summary></entry><entry><title type="html">Udisks2 Udiskie Fares Better Than Ntfs 3g</title><link href="https://bindkey.github.io/udisks2-udiskie-fares-better-than-ntfs-3g/" rel="alternate" type="text/html" title="Udisks2 Udiskie Fares Better Than Ntfs 3g" /><published>2018-01-16T07:45:02-06:00</published><updated>2018-01-16T07:45:02-06:00</updated><id>https://bindkey.github.io/udisks2-udiskie-fares-better-than-ntfs-3g</id><content type="html" xml:base="https://bindkey.github.io/udisks2-udiskie-fares-better-than-ntfs-3g/">&lt;p&gt;It is my opinion, based mostly not on what I’ve read, but instead on what I’ve encountered during the handling of a failed hard disk, that the disk volume mounting utility udisks2 fares better than say, ntfs-3g.&lt;/p&gt;

&lt;p&gt;Quite possibly there could be many improvements with this software, and there is no doubt about it, but considering wear-and-tear conditions of the disk, among other considerations, and, as long as udisks2 is run without an interruption, no other mounting options utility that is currently available may be able to improve its overall performance.&lt;/p&gt;

&lt;p&gt;If time is not a constraint, and the program is allowed to run on its own, udisks2 fairs relatively better on previously loaded Windows OS partitions than any other. Of this I can attest without a doubt. The utility has been able to eventually access corrupted filesystems that would have been rendered unrecoverable otherwise&lt;/p&gt;

&lt;h2 id=&quot;for-futher-info-and-configuration-visit-the-wiki&quot;&gt;For futher info and configuration, visit the wiki:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Udisks#Mount_to_.2Fmedia_.28udisks2.29&quot; target=&quot;_blank&quot;&gt;Mount to /media (udisks2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Udisks&quot; target=&quot;_blank&quot;&gt;Udisks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/NTFS-3G&quot; target=&quot;_blank&quot;&gt;ntfs-3g Arch Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/coldfix/udiskie/wiki/Usage&quot; target=&quot;_blank&quot;&gt;udiskie on github&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">It is my opinion, based mostly not on what I’ve read, but instead on what I’ve encountered during the handling of a failed hard disk, that the disk volume mounting utility udisks2 fares better than say, ntfs-3g.</summary></entry><entry><title type="html">Metadata Irreversible</title><link href="https://bindkey.github.io/metadata-irreversible/" rel="alternate" type="text/html" title="Metadata Irreversible" /><published>2017-12-22T03:13:37-06:00</published><updated>2017-12-22T03:13:37-06:00</updated><id>https://bindkey.github.io/metadata-irreversible</id><content type="html" xml:base="https://bindkey.github.io/metadata-irreversible/">&lt;p&gt;One of the easiest ways to remove all metadata from a file, is by invoking &lt;a href=&quot;#exiftool&quot;&gt;&lt;sup id=&quot;refexiftool&quot;&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ exiftool -all= &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this has the inconvenience of providing a security risk by reversing it as well with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ exiftool -pdf-update:all= &amp;lt;file&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which pretty much inserts the metadata back into the file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/exiftool-reversible-metadata-warning.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to the author of &lt;strong&gt;exiftool&lt;/strong&gt; this can be circumvented by issuing &lt;code&gt;qpdf --linearize &amp;lt;file.in&amp;gt; &amp;lt;file.out&amp;gt;&lt;/code&gt;. For further info about this see:
&lt;a href=&quot;http://owl.phy.queensu.ca/~phil/exiftool/TagNames/PDF.html&quot; target=&quot;_blank&quot;&gt;PDF tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pdftags-linearized.png&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;exiftool&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sno.phy.queensu.ca/~phil/exiftool/exiftool_pod.html&quot; target=&quot;_blank&quot;&gt;exiftool man pages&lt;/a&gt; &lt;a href=&quot;#refexiftool&quot;&gt;_↩︎&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the easiest ways to remove all metadata from a file, is by invoking 1</summary></entry><entry><title type="html">Manjaro Kde Plasma Dolphin Mtp Cant Open File</title><link href="https://bindkey.github.io/manjaro-kde-plasma-dolphin-mtp-cant-open-file/" rel="alternate" type="text/html" title="Manjaro Kde Plasma Dolphin Mtp Cant Open File" /><published>2017-12-16T12:26:25-06:00</published><updated>2017-12-16T12:26:25-06:00</updated><id>https://bindkey.github.io/manjaro-kde-plasma-dolphin-mtp-cant-open-file</id><content type="html" xml:base="https://bindkey.github.io/manjaro-kde-plasma-dolphin-mtp-cant-open-file/">&lt;p&gt;&lt;strong&gt;MTP&lt;/strong&gt; implementation runs on most desktop environments without a problem. Except on KDE where it has had several problems in identifying and initializing a simple file from any of the devices that have been connected to the system, mainly through the USB port.&lt;/p&gt;

&lt;p&gt;It’s really a shame that although Plasma KDE fairly supports Bluetooth protocol better than the rest of other desktop environments, it largely fails with both gwenview and its default Dolphin manager to open up files directly.&lt;/p&gt;

&lt;p&gt;I have tried in a great many occasions to slither out many of these KDE errors by falsely attributing it to my lack of knowledge on its usage. But I can’t deny any longer that the system either works or it doesn’t. And one should no longer have to wait who-knows-how-long-and-when, before updates smother out its deficiencies.&lt;/p&gt;

&lt;p&gt;Yes, I have tried to look up for the issue elsewhere such as as in &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=177028&quot; target=&quot;_blank&quot;&gt;mtp mount issues in KDE/Dolphin&lt;/a&gt;, but many of the suggestions have not worked so far.&lt;/p&gt;

&lt;p&gt;Whereas with KDE, to my amazement - because at this point of its developmental phase, one would think that it should perform better and not worse - the problems all range from mild to critical, while &lt;strong&gt;xfce&lt;/strong&gt; on the other hand, these unexpected malfunctions and sudden out-of-the-blue crashes do occur but at a lesser degree, and when one of these errors undermines the stability, the errors do not necessarily affect the overall functionality.&lt;/p&gt;

&lt;p&gt;I experienced and spoke at somewhat length about a &lt;a href=&quot;/2017/12/14/manjaro-kde-plasma-error-unknown-application-folder/&quot;&gt;manjaro kde error unknown application&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;In the wake of recent Bluetooth vulnerabilities that have happened,&lt;a href=&quot;#blue&quot;&gt;&lt;sup id=&quot;blueref&quot;&gt;1&lt;/sup&gt;&lt;/a&gt;  and the history behind it in which several authors have researched the issue, it makes no sense to have a whole interface that handles this protocol better than most environments and yet fails when the to-be-expected approach to handle it differently or by using the right terminology, handling it without bluetooth at all in light of everything that has happened with it, by going directly through the use of the mtp protocol that takes care of it. And the mtp is supported without a major flaw in &lt;strong&gt;xfce&lt;/strong&gt;, &lt;strong&gt;Gnome&lt;/strong&gt;, and others.&lt;/p&gt;

&lt;p&gt;For further reading about &lt;strong&gt;MTP&lt;/strong&gt;, is advised to visit the formidable wiki from Arch Linux at &lt;a href=&quot;https://wiki.archlinux.org/index.php/MTP&quot; target=&quot;_blank&quot;&gt;MTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that kio-extras is a dependency of Kde’s dolphin file manager, which apparently is partly responsible for the &lt;code&gt;failed to initlialize&lt;/code&gt; error, but whichever is to be blamed in this regard, matters for as long as the user finds the KDE environment worthy to be used. In my case perhaps, the same opinion that for so long I’ve had of the software, has notably changed amid these recent problems: first with the &lt;a href=&quot;/2017/12/14/manjaro-kde-plasma-error-unknown-application-folder/&quot;&gt;manjaro kde error unknown application instance as highlighted earlier&lt;/a&gt;, and now with the bluetooth problem.&lt;/p&gt;

&lt;p&gt;Perhaps is worthy to revisit this desktop environment, but for now, it is in my opinion that there are better options out there from which to choose from, before having to put up with the inconsistencies and failures that have rendered the systems I have been running lately, useless in more than one occasion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mobile.slashdot.org/story/17/09/12/2030213/blueborne-vulnerabilities-impact-over-5-billion-bluetooth-enabled-devices&quot; target=&quot;_blank&quot;&gt;Blueborne vulnerabilities impact devices&lt;/a&gt;&lt;a name=&quot;blue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#blueref&quot;&gt;_↩︎&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">MTP implementation runs on most desktop environments without a problem. Except on KDE where it has had several problems in identifying and initializing a simple file from any of the devices that have been connected to the system, mainly through the USB port.</summary></entry><entry><title type="html">Manjaro Kde Plasma Error Unknown Application Folder</title><link href="https://bindkey.github.io/manjaro-kde-plasma-error-unknown-application-folder/" rel="alternate" type="text/html" title="Manjaro Kde Plasma Error Unknown Application Folder" /><published>2017-12-14T12:28:52-06:00</published><updated>2017-12-14T12:28:52-06:00</updated><id>https://bindkey.github.io/manjaro-kde-plasma-error-unknown-application-folder</id><content type="html" xml:base="https://bindkey.github.io/manjaro-kde-plasma-error-unknown-application-folder/">&lt;p&gt;It’s apparently a foolish idea to login as root from a file manager on Plasma KDE.&lt;/p&gt;

&lt;p&gt;This was exactly what caused a number of problems, and among them, most notably, that I could not get past the login screen.&lt;/p&gt;

&lt;p&gt;Of course, little did it matter that I installed any of the other display managers available and removed the current in use from the command line. I was still unable to get past the login screen.&lt;/p&gt;

&lt;p&gt;In other words, it wasn’t just the usual &lt;code&gt;login failed&lt;/code&gt; which indicates the wrong username and/or password. This was exactly the opposite, as after inputting the password for the system, since &lt;code&gt;login automatically&lt;/code&gt; was disabled, the screen would fall back as if it loading the kernel again, and then without further ado, back into the login screen.&lt;/p&gt;

&lt;p&gt;This feedback loop process was endless. I couldn’t but scourge on Google for some sort of information regarding the issue.&lt;/p&gt;

&lt;p&gt;One of the first queries to Google was with the terms &lt;strong&gt;plasma kde fails to startx&lt;/strong&gt;, although I knew that the last element of the query was not the most accurate. For one, because the &lt;strong&gt;X server&lt;/strong&gt; was somehow running, or else how could I have a login screen in the first place. But almost unsurprisingly, the first result from Google was from the Arch Linux forum entitled &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=193286&quot; target=&quot;_blank&quot;&gt;Cannot start plasma 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tried to follow one of the recommendations and modify the last line to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; exec startkde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/change-xinitrc-for-kde-plasma-login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but it made no difference.&lt;/p&gt;

&lt;p&gt;Perhaps on other desktop environments the change on &lt;strong&gt;.xinitrc&lt;/strong&gt; was a success, but at least on Manjaro Plasma KDE, all of it was failing and I was not able to get past the login screen.&lt;/p&gt;

&lt;p&gt;For example, the suggestion to modify the &lt;strong&gt;.xinitrc&lt;/strong&gt; on the &lt;strong&gt;xfce&lt;/strong&gt; desktop environment have proven to succeed without any major problem.&lt;/p&gt;

&lt;p&gt;See for example &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=147721&quot; target=&quot;_blank&quot;&gt;Can’t get past the login screen&lt;/a&gt;, where modifying the &lt;code&gt;.xinitrc&lt;/code&gt; was more than enough to get it started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/change-xinitrc-for-xfce-login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point it was futile to modify any further the &lt;strong&gt;.xinitrc&lt;/strong&gt; initialization file when moments before I had restarted the system, an error related to Plasma KDE had popped up on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/plasma-error-window.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A couple more errors from the main file manager Dolphin showed for example the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/user-xbel-kde-plasma.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And also&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kio_applicationsrc-error.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, after the infamous error with the &lt;strong&gt;kio_applicationsrc&lt;/strong&gt;, I very well knew that the culprit of it all occurred when trying to login as root to Plasma from the Dolphin file manager.&lt;/p&gt;

&lt;p&gt;Later on, after giving up the have Manjaro KDE running on the system, I found a few posts that spoke about logging in as root on the Plasma environment.&lt;/p&gt;

&lt;p&gt;On the same post that for example was highlighted earlier, there is useful information as why running as root as KDE is altogether discouraged:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dont-run-as-root-on-kde.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s apparently a foolish idea to login as root from a file manager on Plasma KDE.</summary></entry><entry><title type="html">Screen Locker Broken Manjaro Kde</title><link href="https://bindkey.github.io/screen-locker-broken-manjaro-kde/" rel="alternate" type="text/html" title="Screen Locker Broken Manjaro Kde" /><published>2017-12-09T12:58:20-06:00</published><updated>2017-12-09T12:58:20-06:00</updated><id>https://bindkey.github.io/screen-locker-broken-manjaro-kde</id><content type="html" xml:base="https://bindkey.github.io/screen-locker-broken-manjaro-kde/">&lt;p&gt;While updating a fresh installation of Manjaro KDE, the screen locked.
Apparently the default settings for the system, enabled this behavior without
further ado.&lt;/p&gt;

&lt;p&gt;As a result of this problem, the surprising part came afterward when the updates that were being downloaded, suddenly crashed the system. This led to the nonetheless bothersome problem of &lt;code&gt;modules.devname not found&lt;/code&gt; error followed by the no more troublesome error &lt;code&gt;you are now being dropped into an emergency shell&lt;/code&gt; and &lt;code&gt;sh can't access tty; job control turned off&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I didn’t have at the time a live media to access the system. Although I knew the that the sudden crashing during the download of updates , was one of the problems underlying the &lt;code&gt;modules.devname not found&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;A quick google searched returned  &lt;a href=&quot;https://unix.stackexchange.com/questions/355689/manjaro-fails-to-boot-modules-devname-not-found-then-unknown-disk-uuid-error&quot; target=&quot;_blank&quot;&gt;Manjaro fails to boot, modules.devname not found&lt;/a&gt; a result which provided an answer that pointed to access the system with Manjaro’s own &lt;code&gt;mhwd-chroot&lt;/code&gt; command to access the emergency shell. See &lt;a href=&quot;https://wiki.manjaro.org/index.php/Restore_the_GRUB_Bootloader#Chroot_into_your_existing_Manjaro_Installation&quot; target=&quot;_blank&quot;&gt;Chroot into your existing Manjaro Installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mhwd-chroot-steps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And as the already mentioned answer on the unix.stackexchange.com site suggested, it was necessary to reload the image again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chroot-answer-mkinitcpio.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">While updating a fresh installation of Manjaro KDE, the screen locked. Apparently the default settings for the system, enabled this behavior without further ado.</summary></entry><entry><title type="html">Configuring Kakoune Kakrc</title><link href="https://bindkey.github.io/configuring-kakoune-kakrc/" rel="alternate" type="text/html" title="Configuring Kakoune Kakrc" /><published>2017-12-06T11:50:38-06:00</published><updated>2017-12-06T11:50:38-06:00</updated><id>https://bindkey.github.io/configuring-kakoune-kakrc</id><content type="html" xml:base="https://bindkey.github.io/configuring-kakoune-kakrc/">&lt;p&gt;Configuring the &lt;a href=&quot;https://github.com/mawww/kakoune&quot; target=&quot;_blank&quot;&gt;kakoune text editor&lt;/a&gt; initialization file has been nothing short of a chore, as it requires the path environment to be correctly set, before any changes on the &lt;code&gt;kakrc&lt;/code&gt; take ahold of the settings.&lt;/p&gt;

&lt;p&gt;As the tutorial suggests, see &lt;a href=&quot;https://github.com/mawww/kakoune#configuration-autoloading&quot; target=&quot;_blank&quot;&gt;Configuration and autoloading&lt;/a&gt;, if it is launched with the &lt;code&gt;-n&lt;/code&gt; switch, kakoune will source the &lt;code&gt;../share/kak/kakrc&lt;/code&gt;, but on a unrelated issue but nonetheless relevant about the correct location for the initialization file, the developer clearly stated that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The kakrc file in share is Kakounes init script, it is not intended to be user edited. It is actually that script that will load your user configuration in ~/.config/kak/kakrc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/dont-use-share-kakrc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thus, it is necessary to set the environment first on any Unix system. The command &lt;code&gt;setenv&lt;/code&gt; is used for the &lt;strong&gt;csh&lt;/strong&gt; shell, whereas in &lt;strong&gt;bash&lt;/strong&gt;, this is accomplished through the &lt;code&gt;export&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To find out whether for example, &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; was set, is necessary to invoke on the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; printenv XDG_CONFIG_HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which if it does not return a value, the environment has not been set yet.&lt;/p&gt;

&lt;p&gt;To set the environment across sessions, note it accordingly on your &lt;code&gt;bashrc&lt;/code&gt; file with the &lt;code&gt;export&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; export XDG_CONFIG_HOME=$HOME/.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create a directory &lt;strong&gt;kak&lt;/strong&gt; under that environment, and further create your init file &lt;strong&gt;kakrc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the available settings will be available without further modifications. That is, some of the commands that are loaded by not using a &lt;code&gt;kakrc&lt;/code&gt; file, will not have to be further tweaked with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; colorscheme &amp;lt;tab completion&amp;gt; &amp;lt;name of theme&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;can be identified without a problem.&lt;/p&gt;

&lt;p&gt;There are, however, a handful of those that would have to be further tweaked with, in order to load the &lt;strong&gt;kakrc&lt;/strong&gt; init file correctly.&lt;/p&gt;

&lt;p&gt;Take for example, &lt;code&gt;autowrap-enable&lt;/code&gt;, which normally applies soft wrap manipulation to the lines.&lt;/p&gt;

&lt;p&gt;According to the developer,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;autowrapping is provided by the autowrap.kak script (which should be loaded by default), enable it for a buffer with the autowrap-enable command, that you probably want to put in a hook (for example if you want to always enable autowrap, add hook global WinCreate .* %{ autowrap-enable } in your kakrc. the autowrap_column option controls the column on which to autowrap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/mawww/kakoune/issues/419&quot; target=&quot;_blank&quot;&gt;Noob questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/autowrap-kakrc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further customizations to map certain keys are also necessary.&lt;/p&gt;

&lt;p&gt;For example, to map the &lt;code&gt;\&lt;/code&gt; backslash key to say the &lt;code&gt;;&lt;/code&gt; semicolon., it’s imperative to precede the *&lt;em&gt;*&lt;/em&gt; key with the &lt;code&gt;%&lt;/code&gt; percent sign and further enclose the &lt;code&gt;\&lt;/code&gt; backslash key within curly brackets &lt;code&gt;{}&lt;/code&gt;, so the final code would be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert %{\} ';' 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;of course, if the settings are desirable to be loaded globally, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map global insert %{\} ';'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;needs to be specified accordingly on the initialization file.&lt;/p&gt;

&lt;p&gt;See for example this issue: &lt;a href=&quot;https://github.com/mawww/kakoune/issues/419&quot; target=&quot;_blank&quot;&gt;can’t map to backslash&lt;/a&gt;, which touched upon the problem, and further linked &lt;a href=&quot;https://github.com/mawww/kakoune/issues/1049&quot;&gt;https://github.com/mawww/kakoune/issues/1049&lt;/a&gt; and &lt;a href=&quot;https://github.com/mawww/kakoune/issues/1221&quot;&gt;https://github.com/mawww/kakoune/issues/1221&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s certainly two-fold that by specifying:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert ';' \ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the behavior to have the &lt;code&gt;\&lt;/code&gt; inserted, is easily accomplished, as shown on the example above, but the same is not true, by having the same characters inversed within the strings, that would yield the correct results.&lt;/p&gt;

&lt;p&gt;for example whereas&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert ';' \ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is correct, a simple &lt;code&gt;map buffer insert '\' ;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;throws an error with the message &lt;code&gt;parse error: unterminated string '...'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It’s therefore necessary to have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert %{;} \
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the same is true if one were to &lt;code&gt;map buffer insert '\' %{;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;one of the methods that would work across buffers, is to have such characters enclosed within curly brackets and further preceded by the &lt;code&gt;%&lt;/code&gt; sign&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert %{\} %{;} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; map buffer insert %{;} %{\} 
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><summary type="html">Configuring the kakoune text editor initialization file has been nothing short of a chore, as it requires the path environment to be correctly set, before any changes on the kakrc take ahold of the settings.</summary></entry></feed>